// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: blocklist/blocklistpb/blocklist.proto

package blocklistpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlocklistServiceClient is the client API for BlocklistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlocklistServiceClient interface {
	ScoreEvent(ctx context.Context, in *ScoreEventRequest, opts ...grpc.CallOption) (*ScoreEventResponse, error)
	ScoreEvents(ctx context.Context, opts ...grpc.CallOption) (BlocklistService_ScoreEventsClient, error)
}

type blocklistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlocklistServiceClient(cc grpc.ClientConnInterface) BlocklistServiceClient {
	return &blocklistServiceClient{cc}
}

func (c *blocklistServiceClient) ScoreEvent(ctx context.Context, in *ScoreEventRequest, opts ...grpc.CallOption) (*ScoreEventResponse, error) {
	out := new(ScoreEventResponse)
	err := c.cc.Invoke(ctx, "/blocklist.BlocklistService/ScoreEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blocklistServiceClient) ScoreEvents(ctx context.Context, opts ...grpc.CallOption) (BlocklistService_ScoreEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlocklistService_ServiceDesc.Streams[0], "/blocklist.BlocklistService/ScoreEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &blocklistServiceScoreEventsClient{stream}
	return x, nil
}

type BlocklistService_ScoreEventsClient interface {
	Send(*ScoreEventRequest) error
	Recv() (*ScoreEventResponse, error)
	grpc.ClientStream
}

type blocklistServiceScoreEventsClient struct {
	grpc.ClientStream
}

func (x *blocklistServiceScoreEventsClient) Send(m *ScoreEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blocklistServiceScoreEventsClient) Recv() (*ScoreEventResponse, error) {
	m := new(ScoreEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlocklistServiceServer is the server API for BlocklistService service.
// All implementations must embed UnimplementedBlocklistServiceServer
// for forward compatibility
type BlocklistServiceServer interface {
	ScoreEvent(context.Context, *ScoreEventRequest) (*ScoreEventResponse, error)
	ScoreEvents(BlocklistService_ScoreEventsServer) error
	mustEmbedUnimplementedBlocklistServiceServer()
}

// UnimplementedBlocklistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlocklistServiceServer struct {
}

func (UnimplementedBlocklistServiceServer) ScoreEvent(context.Context, *ScoreEventRequest) (*ScoreEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreEvent not implemented")
}
func (UnimplementedBlocklistServiceServer) ScoreEvents(BlocklistService_ScoreEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ScoreEvents not implemented")
}
func (UnimplementedBlocklistServiceServer) mustEmbedUnimplementedBlocklistServiceServer() {}

// UnsafeBlocklistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlocklistServiceServer will
// result in compilation errors.
type UnsafeBlocklistServiceServer interface {
	mustEmbedUnimplementedBlocklistServiceServer()
}

func RegisterBlocklistServiceServer(s grpc.ServiceRegistrar, srv BlocklistServiceServer) {
	s.RegisterService(&BlocklistService_ServiceDesc, srv)
}

func _BlocklistService_ScoreEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlocklistServiceServer).ScoreEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blocklist.BlocklistService/ScoreEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlocklistServiceServer).ScoreEvent(ctx, req.(*ScoreEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlocklistService_ScoreEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlocklistServiceServer).ScoreEvents(&blocklistServiceScoreEventsServer{stream})
}

type BlocklistService_ScoreEventsServer interface {
	Send(*ScoreEventResponse) error
	Recv() (*ScoreEventRequest, error)
	grpc.ServerStream
}

type blocklistServiceScoreEventsServer struct {
	grpc.ServerStream
}

func (x *blocklistServiceScoreEventsServer) Send(m *ScoreEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blocklistServiceScoreEventsServer) Recv() (*ScoreEventRequest, error) {
	m := new(ScoreEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlocklistService_ServiceDesc is the grpc.ServiceDesc for BlocklistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlocklistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocklist.BlocklistService",
	HandlerType: (*BlocklistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScoreEvent",
			Handler:    _BlocklistService_ScoreEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScoreEvents",
			Handler:       _BlocklistService_ScoreEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "blocklist/blocklistpb/blocklist.proto",
}
